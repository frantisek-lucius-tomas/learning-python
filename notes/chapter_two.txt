boolean values

true or false nothing more

comparison operators

| == | equal to
| != | not equat to
| <  | less than 
| >  | greater than
| <= | less than or equal to
| >= | greater than or equal to

binary boolean operators

and : 

true and true = true
true and false = false 
false and true = false 
false and false = false

or : 

true or true = true
true or false = trues
false or true = true 
false or false = false

not : 

not true = false 
not false = true

flow control statements

if execute only if true skip if false
else execute only if is false
elif execute only if previous if was false

while loop statements

while will be execute over and over if it is true   

break end loop if it is on line
continue shot to start loop

for and range() :

doing number of times in range variable is auto increase

range(12, 16) 
first is start and second is end

range(0, 10, 2)
first is start second is end and the trihd is 2x how much increase

import 

you import liberis 

import random
random.randint(1, 10)
gives random numbers between 1 and 10

from import Statements
if use this you dont need use random.somethin

summary 

by using expressions that evaluate to True or False (also called conditions),
you can write programs that make decisions on what code to execute and
what code to skip. you can also execute code over and over again in a loop
while a certain condition evaluates to True. the break and continue statements
are useful if you need to exit a loop or jump back to the start.
these flow control statements will let you write much more intelligent
programs. thereâ€™s another type of flow control that you can achieve by writing your own
functions, which is the topic of the next chapter.

I ended up on page 84
